import matplotlib.pyplot as plt
import sys, getopt
import subprocess
from subprocess import call

KB = 1024
MB = 1024 * 1024
sizes = [ 512, 1 * KB, 4 * KB, 8 * KB, 16 * KB, 32 * KB, 1 * MB, 2 * MB, 4 * MB ]

def plot_graph(bps_list):
    plt.plot(bps_list, sizes, "ro")
    plt.xlabel("Speed (bytes/sec)")
    plt.ylabel("Block size (in bytes)")
    plt.show()

def run_exp(filename, deleted_file):
    bps_list = []
    i = 0
    orig_cmd = "./write_blocks_seq"
    orig_file = filename
    new_filename = orig_file + "copy"
    # Create a copy of the file
    call(["cp", orig_file, new_filename])
    filename = new_filename
    for size in sizes:
        cmd = orig_cmd + " " + filename + " " + str(size)
        print(cmd)
        output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)

        # Delete the copy
        call(["rm","-f",filename])
        for line in output.stdout:
            if "Data rate" in line:
                line_list = line.split(" ")
                print(line_list[2])
                bps_list.append(line_list[2])
       
        # Make a new copy with a different name
        new_filename = orig_file + "copy" + str(i) 
        call(["cp", orig_file, new_filename])
        filename = new_filename

        # If a file needs to be deleted, delete it (i.e., it was generated by
        # the program)
        if deleted_file != "":    
            call(["rm", "-f", deleted_file])
        i += 1
    print(bps_list)
    #plot_graph(bps_list)


def main(argv):
    if len(argv) == 2:
        run_exp(argv[0], argv[1])
    else:
        print("Insufficient number of arguments provided.")
        print("Usage: python run_experiments.py <input file> <output file>")
        sys.exit() 
    #if len(argv) == 3:
    #    run_exp(argv[0], argv[1], argv[2])
    #elif len(argv) == 2:
    #    run_exp(argv[0], argv[1], "")
    #else:
    #    print("Insufficient number of arguments provided.\n")


if __name__ == "__main__":
    i = 0
    while i < 4:
        main(sys.argv[1:])
        i += 1
    # For experiment 3.1, expect run_experiments.py <input file> <output file>
